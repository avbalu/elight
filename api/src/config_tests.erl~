%%%-------------------------------------------------------------------
%%% @author adoor balasubramanian <balu@localhost.localdomain>
%%% @copyright (C) 2015, adoor balasubramanian
%%% @doc
%%%
%%% @end
%%% Created : 28 Jan 2015 by adoor balasubramanian <balu@localhost.localdomain>
%%%-------------------------------------------------------------------
-module(config_tests).

%%%===================================================================
%%% Tests
%%%===================================================================

unit_test_() ->
    {setup,
     fun setup/0,
     fun cleanup/1,
     fun test/1
    }.



setup() ->
    test:setup(),
    {ok, Port} = application:get_env(api,config_tcp_port),
    {ok, C0} = thrift_client_util:new( "localhost", 
				       Port, 
				       config_thrift,[]),
    C0.
   
cleanup(X) ->
    test:cleanup(X).

test(C0) ->
    [?_test(ping_t(C0)),
     ?_test(add_filters_t(C0)),
     ?_test(add_filters_t(C0)),
     ?_test(add_filters_duplicate_t(C0)),
     ?_test(add_filters_input_duplicate_t(C0)),
     ?_test(del_filters_t(C0)),
     ?_test(get_filters_empty_t(C0)),
     ?_test(add_filters_events_t(C0))].


ping_t(C0) ->
     {C1, {ok, <<"pong">>} } = thrift_client:call (C0, ping, []),
    {_C2, {ok, <<"pong">>} } = thrift_client:call (C1, ping, []).

add_filters_t(C0) ->   
    Filters = [#filter{id = 1, condition = #condition{client = #network{ipAddress = <<10,0,0,8>>,mask = 32}}, action = #action{logSession = 3}}],
    [ begin 
	  catch del_filters(X, [1]),
	  thrift_client:call(C0, add_filters,[X, Filters])
      end || X <- dbs()].

add_filters_duplicate_t(C0) ->    
    Filters = [#filter{id = 1, condition = #condition{client = #network{ipAddress = <<10,0,0,1>>,mask = 32}}, action = #action{logSession = 3}}],    
    [ begin catch add_filters(X, Filters),
	    {_C1, {exception,#duplicateEntry{object = <<"[1]">>}}}
		= ( catch thrift_client:call(C0, add_filters,[X, Filters]))
      end || X <- dbs()].


add_filters_input_duplicate_t(C0) ->
    Filters = [#filter{id = X} || X <- [5,6,7,5,6]],
    [{_C1, {exception,{invalidInput,<<"Duplicate Filter Ids [5,6] in input">>}}}
     = (catch thrift_client:call(C0, add_filters,[X, Filters]))
     || X <- dbs() ]. 
    
del_filters_t(C0) ->
   
    Filters = [#filter{id = 1, condition = #condition{client = #network{ipAddress = <<10,0,0,1>>,mask = 32}}, action = #action{logSession = 3}}],
    [ begin catch add_filters(X, Filters),
	    thrift_client:call(C0, del_filters,[[1]])
      end || X <- dbs() ].

dbs() ->
    [?api_DbType_RUNNING, ?api_DbType_STARTUP, ?api_DbType_DEFAULT].

get_filters_empty_t(C0) ->
    F = fun(Db, Cin) -> 
		{Cout, R} = thrift_client:call(Cin, get_filters,[Db]),
		?dbg(R),
		Cout
	end,
    lists:foldl(F, C0, dbs()).

get_filters_t(C0) ->
    Filters = [#filter{id = 1, condition = #condition{client = #network{ipAddress = <<10,0,0,8>>,mask = 32}}, action = #action{logSession = 3}}],    
    [ catch add_filters(X, Filters)
     || X <- dbs() ],
    get_filters_empty_t(C0).

add_filters_events_t(C0) ->   
    Filters = [#filter{id = 1, condition 
		       = #condition{client 
				    = #network{ipAddress = <<10,0,0,8>>,
					       mask = 32}}, 
		       action = #action{logSession = 3, notify = 2}}],
    [ begin 
	  catch del_filters(X, [1]),
	  thrift_client:call(C0, add_filters,[X, Filters])
      end || X <- dbs()].


