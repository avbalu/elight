%%%-------------------------------------------------------------------
%%% @author adoor balasubramanian <balu@localhost.localdomain>
%%% @copyright (C) 2015, adoor balasubramanian
%%% @doc Monitor
%%% House keeping functions for Monitor app
%%% Maintains common tabels for sessions
%%% Handles stats for common tables
%%% @end
%%% Created : 27 Jan 2015 by adoor balasubramanian <balu@localhost.localdomain>
%%%-------------------------------------------------------------------
-module(monitor).

-behaviour(gen_server).

%% API 
-export([start_link/0]).

-export([add_filters/1, del_filters/1]).

%% gen_server callbacks
-export([init/1, handle_call/3, handle_cast/2, handle_info/2,
	 terminate/2, code_change/3]).

-include("../../common/common.hrl").
-include_lib("eunit/include/eunit.hrl").

-define(SERVER, ?MODULE).

-record(state, {}).

%%%===================================================================
%%% API
%%%===================================================================
add_filters(Filters) ->
    gen_server:call(monitor, {add_filters, Filters}).

del_filters(Filters) ->
    gen_server:call(monitor, {del_filters, Filters}).

%%--------------------------------------------------------------------
%% @doc
%% Starts the server
%%
%% @spec start_link() -> {ok, Pid} | ignore | {error, Error}
%% @end
%%--------------------------------------------------------------------
start_link() ->
    gen_server:start_link({local, ?SERVER}, ?MODULE, [], []).

%%%===================================================================
%%% gen_server callbacks
%%%===================================================================

%%--------------------------------------------------------------------
%% @private
%% @doc
%% Initializes the server
%%
%% @spec init(Args) -> {ok, State} |
%%                     {ok, State, Timeout} |
%%                     ignore |
%%                     {stop, Reason}
%% @end
%%--------------------------------------------------------------------
init([]) ->
    filterStats = ets:new(filterStats, [named_table, 
			   public, 
			   {keypos, #filterStats.id}]),
    debug_session = ets:new(debug_session, [named_table, 
			  public,
			  {keypos, #debug_session.key}]),
    true = ets:insert_new(debug_session, #debug_session{key = terminate}),
    true = ets:insert_new(debug_session, #debug_session{key = unexpected}),
    Filters = configdb:get(filters),
    add_filters1(Filters),
    {ok, #state{}}.
    
%%--------------------------------------------------------------------
%% @private
%% @doc
%% Handling call messages
%%
%% @spec handle_call(Request, From, State) ->
%%                                   {reply, Reply, State} |
%%                                   {reply, Reply, State, Timeout} |
%%                                   {noreply, State} |
%%                                   {noreply, State, Timeout} |
%%                                   {stop, Reason, Reply, State} |
%%                                   {stop, Reason, State}
%% @end
%%--------------------------------------------------------------------
handle_call({add_filters, Filters}, _From, State) ->
    Reply = add_filters1(Filters),
    {reply, Reply, State};
    
handle_call({del_filters, Ids}, _From, State) ->
    Reply = del_filters1(Ids),
    {reply, Reply, State};
    
handle_call(filterStats, _From, State) ->
    Reply = ets:tab2list(filterStats),
    {reply, Reply, State}.

%%--------------------------------------------------------------------
%% @private
%% @doc
%% Handling cast messages
%%
%% @spec handle_cast(Msg, State) -> {noreply, State} |
%%                                  {noreply, State, Timeout} |
%%                                  {stop, Reason, State}
%% @end
%%--------------------------------------------------------------------
handle_cast(_Msg, State) ->
    {noreply, State}.

%%--------------------------------------------------------------------
%% @private
%% @doc
%% Handling all non call/cast messages
%%
%% @spec handle_info(Info, State) -> {noreply, State} |
%%                                   {noreply, State, Timeout} |
%%                                   {stop, Reason, State}
%% @end
%%--------------------------------------------------------------------
handle_info(_Info, State) ->
    {noreply, State}.

%%--------------------------------------------------------------------
%% @private
%% @doc
%% This function is called by a gen_server when it is about to
%% terminate. It should be the opposite of Module:init/1 and do any
%% necessary cleaning up. When it returns, the gen_server terminates
%% with Reason. The return value is ignored.
%%
%% @spec terminate(Reason, State) -> void()
%% @end
%%--------------------------------------------------------------------
terminate(_Reason, _State) ->
    ok.

%%--------------------------------------------------------------------
%% @private
%% @doc
%% Convert process state when code is changed
%%
%% @spec code_change(OldVsn, State, Extra) -> {ok, NewState}
%% @end
%%--------------------------------------------------------------------
code_change(_OldVsn, State, _Extra) ->
    {ok, State}.

%%%===================================================================
%%% Internal functions
%%%===================================================================
add_filters1(Filters) ->
    Stats = [#filterStats{id = Id} || #filter{id = Id} <- Filters],
    true = ets:insert_new(filterStats, Stats),
    ok.

del_filters1(Ids) ->
    [true = ets:delete(filterStats, Id)
     || Id <- Ids], 
    ok.
