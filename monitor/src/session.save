%%%-------------------------------------------------------------------
%%% @author adoor balasubramanian <balu@localhost.localdomain>
%%% @copyright (C) 2014, adoor balasubramanian
%%% @doc
%%% The end_cause in #state{} represents the reason for session termination
%%  When the session ends in established state with atleast one completed transaction, then the end_cause is considered normal, irrespective of who close the connection and how.
%%% When the session ends in aw_response state, the end_cause is not normal even if soem transactions ahve been completed succussfully in the session.

%%% when timeout occurs before any transaction has completed or while in aw_response state, end_cause will be set to timeout

%%% in case of timeout, t_last_msg + timeout is used to calculate session duration
%%% Todo: retransmission, pipelining
%%% @end
%%% Created : 30 Dec 2014 by adoor balasubramanian <balu@localhost.localdomain>
%%%-------------------------------------------------------------------
-module(session).

-behaviour(gen_fsm).

-include("../../common/common.hrl").
-include("../../filer/include/filer.hrl").
-include("../../api/include/event_mgr.hrl").

%% API
-export([start_link/2, send/2]).
%-compile(export_all).

%% gen_fsm callbacks
-export([init/1, state_name/2, state_name/3, handle_event/3,
	 handle_sync_event/4, handle_info/3, terminate/3, code_change/4]).

%% state functions
-export([aw_syn_ack/2, aw_ack_syn_ack/2, established/2, aw_first_request/2,
	aw_first_response/2, aw_request/2, aw_response/2]).

-type state() :: idle |
		 aw_syn_ack | 
		 aw_ack_syn_ack | 
		 first_req |
		 established |
		 aw_first_request |
		 aw_first_response |
		 aw_response |
		 aw_request.

%% @doc sequence numbers
%% used to indetify retransmissions
%% seq and ack numbers are used to match response to request
%% cseq - client sequence number 
%% sseq_expected_by_c - sequence number expected by client from server
%% these two are copied from seq and acknum fields, respectively, from
%% each client packet.

%% sseq - server sequence number
%% cseq_exp_by_s - sequence number expected by server from client
%% these two are copied from each server packet

%% @TODO In case of pipelined HTTP/1.1 requests, the above alogorithm 
%% addresses request/response matching of only first pair.
%% match all request/response pairs in case of pipleling is TBD.
%% current state = hd(states)
%% transaction is used to build stats for the current transaction
%%    it is moved to transactions when one of the following two events 
%% happen
%%      1) A new client request (second or later) comes in, 
%%         to make room for next transaction
%%      2) When session ends, if teh current transaction is complete
%% transactions are in reverse chrnological order

-record(state, { session_key :: tuple(),
		 sniffer :: pid(),
		 session :: #session{},
		 t_start :: time(),
		 latency :: latency(),
		 end_cause :: end_cause(),
		 retrans = 0 :: non_neg_integer(),
		 transaction = #transaction{} :: #transaction{},
		 transactions = [] :: [#transaction{}],

		 cseq0 :: non_neg_integer(),
		 cseq :: non_neg_integer(),
		 cseq_next :: non_neg_integer(),

		 sseq0 :: non_neg_integer(),
		 sseq :: non_neg_integer(),
		 sseq_next :: non_neg_integer(),

		 states = [] :: [state()], % in reverse order

		 t_last_msg :: time(),
		 pcap_records :: [binary()],
		 filters :: [#filter{}]
	       }).

%% @doc next_state
%% returned by each state function
-record(next_state, {
	  next_state :: state(),
	  state :: #state{},
	  timeout = ?MSG_TIMEOUT :: ?MSG_TIMEOUT}).
%%%===================================================================
%%% API
%%%===================================================================

%%--------------------------------------------------------------------
%% @doc
%% Creates a gen_fsm process which calls Module:init/1 to
%% initialize. To ensure a synchronized start-up procedure, this
%% function does not return until Module:init/1 has returned.
%%
%% @spec start_link() -> {ok, Pid} | ignore | {error, Error}
%% @end
%%--------------------------------------------------------------------
start_link(Msg, Filters) ->
    gen_fsm:start_link(?MODULE, {Msg, Filters}, [{debug,[{log_to_file,"/home/balu/elight/lib/monitor/log/session.log"}]}]).

send(FsmRef, Event) when is_pid(FsmRef)->
    gen_fsm:send_event(FsmRef, Event).

%%%===================================================================
%%% gen_fsm callbacks
%%%===================================================================

%%--------------------------------------------------------------------
%% @private
%% @doc
%% Whenever a gen_fsm is started using gen_fsm:start/[3,4] or
%% gen_fsm:start_link/[3,4], this function is called by the new
%% process to initialize.
%%
%% @spec init(Args) -> {ok, StateName, State} |
%%                     {ok, StateName, State, Timeout} |
%%                     ignore |
%%                     {stop, StopReason}
%% @end
%%--------------------------------------------------------------------
init({#msg{sender = Name,
	   session_key = Key,
	   ts = T,
	   five_tuple = #five_tuple{sip = SIP, dip = DIP, dp = DP},
	   seq = Seq,
	   data_len = DataLen,
	   pcap_record = PcapRec},
      Filters}) ->
    {ok, aw_syn_ack, 
     #state{session_key = Key, 
	    sniffer = Name,
	    session = #session{client = SIP, 
			       server = DIP, 
			       port = DP},
	    t_start = T,
	    cseq0 = Seq,
	    cseq = 1 + DataLen,
	    cseq_next = 1 + DataLen,
	    states = [aw_syn_ack],
	    t_last_msg = T,
	    pcap_records = [PcapRec],
	    filters = Filters
	   }, 
     ?MSG_TIMEOUT}.

%%--------------------------------------------------------------------
%% @private
%% @doc
%% There should be one instance of this function for each possible
%% state name. Whenever a gen_fsm receives an event sent using
%% gen_fsm:send_event/2, the instance of this function with the same
%% name as the current state name StateName is called to handle
%% the event. It is also called if a timeout occurs.
%%
%% In all States we need to take care of 
%% timeout
%% session end (FIN/RST)
%% retransmission,
%% just ACK without Data  
%% TCP fragments/ message from unexpected direction
%% normal case
%% unexpected message
%% 
%% normal case - one that moves the fsm forward
%% All packets except the initial SYN packet from the client should have the ACK bit set
%% @spec state_name(Event, State) ->
%%                   {next_state, NextStateName, NextState} |
%%                   {next_state, NextStateName, NextState, Timeout} |
%%                   {stop, Reason, NewState}
%% @end
%%--------------------------------------------------------------------


%% SYN comes in as part of session init.

%% @doc aw_syn_ack

%% timeout
aw_syn_ack(timeout, State) ->
    timeout(State, no_syn_ack);

%% session end (FIN/RST)
aw_syn_ack(#msg{f=Fin, r=Rst} = Msg, State) when Fin;Rst ->
      end_session(Rst, Msg, State, no_syn_ack);

%% SYN retransmission
aw_syn_ack(#msg{
	      five_tuple = #five_tuple{sip = SIP, dip = DIP, dp = DP}, 
	      seq = Seq,
	      s = true,
	      r = false,
	      f = false,
	      a = false} = Msg,
	   #state{cseq0 = Seq,
		  session = #session{client = SIP, 
				     server = DIP, 
				     port = DP},
		  retrans = SR} = State) ->
    update(aw_syn_ack, Msg, State#state{
			      retrans = SR + 1});
		  
%% just ACK without Data  
%% normal case
aw_syn_ack(#msg{ % SYN_ACK
	      ts=T,
	      five_tuple = #five_tuple{sip = SIP, dip = DIP, sp = SP},
	      seq = Seq,
	      ack = Ack,
	      a = true,
	      s = true,
	      data_len = DataLen} = Msg,
	   #state{cseq0 = CSeq0,
		  cseq_next = CSeqN,
		  t_start = T0,
		  session = #session{client = DIP,
				     server = SIP,
				     port = SP}
		 } = State) 
when CSeqN =:= Ack - CSeq0 ->
    update(aw_ack_syn_ack,Msg, State#state{ latency = latency(T0,T),
					    sseq0 = Seq,
					    sseq = 1 + DataLen,
					    sseq_next = 1 + DataLen});
%% unexpected message
aw_syn_ack(Msg,State) ->
    unexpected(aw_syn_ack, Msg, State).

%%----------
%% @doc aw_ack_syn_ack
%%----------------
%% timeout
aw_ack_syn_ack(timeout, State) ->
    timeout(State, no_ack_syn_ack);

%% session end (FIN/RST)
aw_ack_syn_ack(#msg{r=Rst,
		    f=Fin			
		   } = Msg, 
	       State) when Fin; Rst ->
    end_session(Rst, Msg, State, 
		no_client_request);

%% retransmission,
aw_ack_syn_ack(#msg{ % SYN Retransmission
		  five_tuple = #five_tuple{sip = SIP, dip = DIP, dp = DP}, 
		  seq = Seq,
		  s = true,
		  r = false,
		  f = false,
		  a = false} = Msg,
	       #state{cseq0 = Seq,
		      session = #session{client = SIP, 
					 server = DIP, 
					 port = DP},
		      retrans = SR} = State) ->
update(aw_ack_syn_ack, Msg, State#state{ retrans = SR + 1});

aw_ack_syn_ack(#msg{ % SYN_ACK retransmission
		  ts=T,
		  five_tuple = #five_tuple{sip = SIP, dip = DIP, sp = SP},
		  seq = Seq,
		  ack = Ack,
		  a = true,
		  r = false,
		  s = true,
		  f = false
		  } = Msg,
	       #state{cseq0 = CSeq0,
		      cseq_next = CSeqN,
		      sseq0 = Seq,
		      t_start = T0,
		      session = #session{client = DIP,
					 server = SIP,
					 port = SP}
		     } = State) 
  when CSeqN =:= Ack - CSeq0 ->
    update(aw_ack_syn_ack, Msg, State#state{ latency = latency(T0,T)});

%% just ACK without Data  
%% normal case
aw_ack_syn_ack(#msg{ % ackSynAck
		  five_tuple = #five_tuple{sip = SIP, dip = DIP, dp = DP}, 
		  seq = Seq,
		  ack = Ack,
		  a = true,
		  data_len = DataLen}= Msg,
	       #state{sseq0 = SSeq0, cseq0 = CSeq0, sseq_next = SSeqN,
		      cseq_next = CSeqN,
		      session = #session{client = SIP, 
					 server = DIP, 
					 port = DP
					}
		     } = State) 
  when Ack - SSeq0 =:= SSeqN, Seq - CSeq0 =:= CSeqN ->
    CSeq = Seq - CSeq0,
    NewState = State#state{cseq = CSeq,
			   cseq_next = CSeq + DataLen},

    update(established, Msg, NewState);

%% unexpected message
aw_ack_syn_ack(Msg, State) ->    
     unexpected(aw_ack_syn_ack, Msg, State).

%---------------------------
%% @doc established
%% control message retransmission (synAck/AckSynAck) possible
%% regular ACK not possible 
%% Client Request or Server Greetings is the normal case
%----------------------------------

%% timeout
established(timeout, State) ->
    timeout(State, no_client_request);

%% session end (FIN/RST)
established(#msg{f=Fin, r=Rst} = Msg, State) when Fin;Rst ->
    end_session(Rst, Msg, State, no_client_request);

%% retransmission,
established(#msg{ % SYN_ACK retransmission
	       five_tuple = #five_tuple{sip = SIP, dip = DIP, sp = SP}, 
	       seq = Seq,
	       s = true,
	       a = true} = Msg,
	    #state{
	       sseq0 = Seq,
	       session = #session{client = DIP,
				  server = SIP,
				  port = SP},
	       retrans = SR
	      } = State) ->
    update(established, Msg, State#state{retrans = SR + 1});

established(#msg{ % ackSynAck retransmission
		  five_tuple = #five_tuple{sip = SIP, dip = DIP, dp = DP}, 
		  seq = Seq,
		  ack = Ack,
		  a = true,
		  data_len = 0}= Msg,
	       #state{sseq0 = SSeq0, cseq0 = CSeq0, sseq_next = SSeqN,
		      cseq_next = CSeqN,
		      session = #session{client = SIP, 
					 server = DIP, 
					 port = DP
					},
	       retrans = SR
		     } = State) 
  when Ack - SSeq0 =:= SSeqN, Seq - CSeq0 =:= CSeqN ->
    update(established, Msg, State#state{retrans = SR + 1});


%% normal case
%% Server Greeting
%% unsolicited
%% usually comes before client request
established(#msg{
	       five_tuple = #five_tuple{sip = SIP, dip = DIP, sp = SP}, 
	       seq = Seq,
	       ack = Ack,
	       data_len = L} = Msg,
	    #state{sseq0 = SSeq0,
		   sseq_next = SSeqN,
		   cseq0 = CSeq0,
		   session = #session{client = DIP,
				      server = SIP,
				      port = SP}
		  } = State) 
  when Seq - SSeq0 =:= SSeqN, Ack - CSeq0 =:= 1 ->
    tx_update(aw_first_request, Msg, State#state{sseq = SSeqN,
					    sseq_next = SSeqN + L});

%% normal case
%% client first Request
established(#msg{
	       five_tuple = #five_tuple{sip = SIP, dip = DIP, dp = DP},
	       ts = T,
	       seq = Seq,
	       ack = Ack,
	       a = true,
	       data_len = L
	      } = Msg,
	    #state{
	       cseq0 = CSeq0, sseq0 = SSeq0,
	       cseq_next = CSeqN, sseq_next = SSeqN,
	       session = #session{client = SIP, 
				  server = DIP, 
				  port = DP}
	      } = State) 
when Seq - CSeq0 =:= CSeqN, Ack - SSeq0 =:= SSeqN ->
    rx_update(aw_first_response, Msg, 
	      State#state{ cseq = CSeqN,
			   cseq_next = CSeqN + L,
			   transaction = #transaction{t_start = T}});

%% unexpected
established(Msg, State) ->
    unexpected(established, Msg, State).
%%------------------------------------------------------
%% @doc aw_first_request
%% no control message retransmissions 
%% ACK only packets possible but only from Client 
%%     possibly to server greetins
%% Server greetings retransmission possible.
%%    However, we do not update retrans count as it does not 
%% No retrans from client
%%    response time or first request time
%% normal case is client request
%%------------------------------
%% timeout
aw_first_request(timeout, State) ->
    timeout(State, no_client_request);

%% session end (FIN/RST)
aw_first_request(#msg{f=Fin, r=Rst} = Msg, State) when Fin;Rst ->
    end_session(Rst, Msg, State, no_client_request);

%% retransmission
%% Server greetings
aw_first_request(
  #msg{
     five_tuple = #five_tuple{sip = SIP, dip = DIP, sp = SP}, 
     seq = Seq,
     a = true} = Msg,
  #state{sseq = SSeq, sseq0 = SSeq0,
	 session = #session{client = DIP,
			    server = SIP,
			    port = SP}} = State) 
when Seq - SSeq0 =:= SSeq ->
    tx_update(aw_first_request, Msg, State);
%% update retrans

%% just ACK without Data  
%% from client
aw_first_request(
  #msg{
     five_tuple = #five_tuple{sip = SIP, dip = DIP, dp = DP}, 
     seq = Seq,
     ack = Ack,
     a = true,
     data_len = 0} = Msg,
  #state{ 
     cseq0 = CSeq0, cseq = CSeq, sseq0 = SSeq0, sseq_next = SSeqN,
     session = #session{client = SIP, 
			server = DIP, 
			port = DP}} = State)
  when Seq - CSeq0 =:= CSeq, Ack - SSeq0 =< SSeqN ->
    update(aw_first_request, Msg, State);
    
%% TCP fragments/ message from unexpected direction
%% We assume that serevr greetings usually fits in one TCP Segment

%% normal case
%% client Request
aw_first_request(
  #msg{
     five_tuple = #five_tuple{sip = SIP, dip = DIP, dp = DP},
     ts = T,
     seq = Seq,
     a = true,
     data_len = L
    } = Msg,
  #state{
     cseq0 = CSeq0,
     cseq_next = CSeqN,
     session = #session{client = SIP, 
			server = DIP, 
			port = DP}
    } = State) 
  when Seq - CSeq0 =:= 1 ->
    rx_update(aw_first_response, Msg, 
	      State#state{ 
		cseq = CSeqN,
		cseq_next = CSeqN + L,
		transaction = #transaction{t_start = T}});

%% unexpected message
aw_first_request(Msg, State) ->
    unexpected(aw_first_request, Msg, State).

%%------------------
%% @doc aw_first_response
%% normal message is server response
%% retransmission of client request
%% Ack only from Client for Server greetingsis possible, 
%%   however, we assume that usually Server greeings, if any,
%%   usually gets delivered before 
%% Ack only from Server is possible and is usual
%%-----------------

%% timeout
aw_first_response(timeout, State) ->
    timeout(State, no_server_response);

%% session end (FIN/RST)
aw_first_response(#msg{f=Fin, r=Rst} = Msg, State) when Fin;Rst ->
    end_session(Rst, Msg, State, no_server_response);

%% retransmission
%% client request
aw_first_response(
  #msg{
     five_tuple = #five_tuple{sip = SIP, dip = DIP, dp = DP},
     seq = Seq,
     a = true
    } = Msg,
  #state{
     cseq0 = CSeq0,
     session = #session{client = SIP, 
			server = DIP, 
			port = DP},
     transaction = #transaction{retrans = R} = Tr
    } = State) 
  when Seq - CSeq0 =:= 1 ->
    rx_update(aw_first_response, Msg, 
	      State#state{transaction = Tr#transaction{retrans = R + 1}});

%% just ACK without Data  
%% ack from server for client request
aw_first_response(
  #msg{
     five_tuple = #five_tuple{sip = SIP, dip = DIP, sp = SP}, 
     seq = Seq,
     ack = Ack,
     a = true,
     data_len = 0} = Msg,
  #state{ 
     sseq0 = SSeq0, sseq = SSeq, cseq0 = CSeq0, cseq_next = CSeqN,
	 session = #session{client = DIP,
			    server = SIP,
			    port = SP}} = State)
  when Seq - SSeq0 =:= SSeq, Ack - CSeq0 =< CSeqN ->
    update(aw_first_response, Msg, State);

%% TCP fragments/ message from unexpected direction
%% case - first request did not fit in a single TCP segment
%%      say , for e.g. HTTP Post
aw_first_response(
  #msg{
     five_tuple = #five_tuple{sip = SIP, dip = DIP, dp = DP},
     seq = Seq,
     ack = Ack,
     a = true,
     data_len = L
    } = Msg,
  #state{
     cseq0 = CSeq0, sseq0 = SSeq0,
     cseq_next = CSeqN, sseq_next = SSeqN,
     session = #session{client = SIP, 
			server = DIP, 
			port = DP}
    } = State) 
  when Seq - CSeq0 =:= CSeqN, Ack - SSeq0 =:= SSeqN ->
    rx_update(aw_first_response, Msg, 
	      State#state{ cseq = CSeqN,
			   cseq_next = CSeqN + L});
		  
%% normal case
%% first response from server
aw_first_response(
  #msg{
     five_tuple = #five_tuple{sip = SIP, dip = DIP, sp = SP},
     ts = T,
     seq = Seq,
     ack = Ack,
     a = true,
     data_len = L
    } = Msg,
  #state{
     sseq0 = SSeq0, sseq_next = SSeqN, 
     cseq0 = CSeq0, cseq_next = CSeqN,
     session = #session{client = DIP,
			server = SIP,
			port = SP},
     transaction = #transaction{ t_start = T0 } = Tr} = State)
  when Ack - CSeq0 =< CSeqN,  Seq - SSeq0 =:= SSeqN ->
    SSeq = Seq - SSeq0,
    NewTr = Tr#transaction{latency = latency(T0, T)},
    NewState = State#state{sseq = SSeq, sseq_next = SSeq + L,
			  transaction = NewTr},
    tx_update(aw_request, Msg, NewState);
     
%% unexpected message
aw_first_response(Msg, State) ->
    unexpected(aw_first_response, Msg, State).

%%--------------------------------------
%% @doc aw_request
%% Entry Condition - length(transactions) 
%%                      == #of times this state has been transitioned to, 
%%                          including this one
%%                   transaction = undefined
%% Re-entry condition - length(transactions) > 1
%%                      transaction = undefined
%% Ack only packets possible but only from Client
%%    This is for previous server response
%% Retransmission possible but from server only
%%     This is previous server response
%% Normal case - Client Request or Session End
%% Fragments from Server also possibe 
%%         This will be the case when previous server response
%%         did not fit in single segment
%%--------------------------------------

%% timeout
aw_request(timeout, State) ->
    timeout(State, normal);

%% session end (FIN/RST)
aw_request(#msg{f=Fin, r=Rst} = Msg, State) when Fin;Rst ->
    end_session(Rst, Msg, State, normal);

%% retransmission
%% server response
aw_request(
  #msg{
     five_tuple = #five_tuple{sip = SIP, dip = DIP, sp = SP},
     seq = Seq,
     a = true} = Msg,
  #state{
     sseq0 = SSeq0, sseq_next = SSeqN, 
     session = #session{client = DIP,
			server = SIP,
			port = SP},
    transaction = #transaction{retrans = R} = Tr} = State)
when Seq - SSeq0 < SSeqN ->
    NewTr = Tr#transaction{retrans = R + 1},
    tx_update(aw_request, Msg, State#state{transaction = NewTr});
    
%% just ACK without Data  
%% from Client
aw_request(
  #msg{five_tuple = #five_tuple{sip = SIP, dip = DIP, dp = DP},
       seq = Seq,
       a = true,
       data_len = 0
      } = Msg,
  #state{
     cseq0 = CSeq0, cseq_next = CSeqN, 
     session = #session{client = SIP,
			server = DIP,
			port = DP}} = State)
  when Seq - CSeq0 >= CSeqN ->
    update(aw_request, Msg, State);
  
%% TCP fragments
%% from server
aw_request(
  #msg{
     five_tuple = #five_tuple{sip = SIP, dip = DIP, sp = SP},
     seq = Seq,
     ack = Ack,
     a = true,
     data_len = L
    } = Msg,
  #state{
     sseq0 = SSeq0, sseq_next = SSeqN, 
     cseq0 = CSeq0, cseq_next = CSeqN,
     session = #session{client = DIP,
			server = SIP,
			port = SP}} = State)
  when Seq - SSeq0 =:= SSeqN, Ack - CSeq0 =< CSeqN ->
    SSeq = Seq - SSeq0,
    tx_update(aw_request, Msg, State#state{
				 sseq = SSeq,
				 sseq_next = SSeq + L});

%% normal case
%% client request
aw_request(
  #msg{
     five_tuple = #five_tuple{sip = SIP, dip = DIP, dp = DP},
     ts = T,
     seq = Seq,
     a = true,
     data_len = L
    } = Msg,
  #state{
     cseq0 = CSeq0,
     cseq_next = CSeqN,
     session = #session{client = SIP, 
			server = DIP, 
			port = DP},
     transaction = Tr,
     transactions = Trs
    } = State) 
  when Seq - CSeq0 =:= CSeqN ->
    rx_update(aw_response, Msg, 
	      State#state{
		cseq = CSeqN,
		cseq_next = CSeqN + L,
		transaction = #transaction{t_start = T},
		transactions = [Tr|Trs]});
%% unexpected message
aw_request(Msg, State) ->
    unexpected(aw_request, Msg, State).
%%------------------------------------
%% @doc aw_response
%%------------------------------
aw_response(timeout, State) ->
     timeout(State, no_server_response);

%% session end (FIN/RST)
aw_response(#msg{f=Fin, r=Rst} = Msg, State) when Fin;Rst ->
    end_session(Rst, Msg, State, no_server_response);

%% retransmission
%% client request
aw_response(
  #msg{
     five_tuple = #five_tuple{sip = SIP, dip = DIP, dp = DP},
     seq = Seq,
     a = true
    } = Msg,
  #state{
     cseq0 = CSeq0, cseq = CSeq,
     session = #session{client = SIP, 
			server = DIP, 
			port = DP},
     transaction = #transaction{retrans = R} = Tr
    } = State) 
  when Seq - CSeq0 =:= CSeq ->
    rx_update(aw_response, Msg, 
	      State#state{transaction = Tr#transaction{retrans = R + 1}});
    
%% just ACK without Data  
%% ack from server for client request
aw_response(  #msg{
     five_tuple = #five_tuple{sip = SIP, dip = DIP, sp = SP}, 
     seq = Seq,
     ack = Ack,
     a = true,
     data_len = 0} = Msg,
  #state{ 
     sseq0 = SSeq0, sseq = SSeq, cseq0 = CSeq0, cseq_next = CSeqN,
	 session = #session{client = DIP,
			    server = SIP,
			    port = SP}} = State)
  when Seq - SSeq0 =:= SSeq, Ack - CSeq0 =< CSeqN ->
    update(aw_response, Msg, State);

%% TCP fragments/ message from unexpected direction
%% case -  request did not fit in a single TCP segment
%%      say , for e.g. HTTP Post
aw_response(
  #msg{
     five_tuple = #five_tuple{sip = SIP, dip = DIP, dp = DP},
     seq = Seq,
     a = true,
     data_len = L
    } = Msg,
  #state{
     cseq0 = CSeq0,
     cseq_next = CSeqN,
     session = #session{client = SIP, 
			server = DIP, 
			port = DP}
    } = State) 
  when Seq - CSeq0 >= CSeqN ->
    rx_update(aw_first_response, Msg, 
	      State#state{ cseq = CSeqN,
			   cseq_next = CSeqN + L});

%% normal case
%% response from server
aw_response(
  #msg{
     five_tuple = #five_tuple{sip = SIP, dip = DIP, sp = SP},
     ts = T,
     seq = Seq,
     ack = Ack,
     a = true,
     data_len = L
    } = Msg,
  #state{
     sseq0 = SSeq0, sseq_next = SSeqN, 
     cseq0 = CSeq0, cseq_next = CSeqN,
     session = #session{client = DIP,
			server = SIP,
			port = SP},
     transaction = #transaction{ t_start = T0 } = Tr} = State)
  when Ack - CSeq0 =< CSeqN,  Seq - SSeq0 =:= SSeqN ->
    SSeq = Seq - SSeq0,
    NewTr = Tr#transaction{latency = latency(T0, T)},
    NewState = State#state{sseq = SSeq, sseq_next = SSeq + L,
			  transaction = NewTr},
    tx_update(aw_request, Msg, NewState);
     
%% unexpected message
aw_response(Msg, State) ->
    unexpected(aw_response, Msg, State).
%%--------------------------------------

state_name(_Event, State) ->
    {next_state, state_name, State}.

%%--------------------------------------------------------------------
%% @private
%% @doc
%% There should be one instance of this function for each possible
%% state name. Whenever a gen_fsm receives an event sent using
%% gen_fsm:sync_send_event/[2,3], the instance of this function with
%% the same name as the current state name StateName is called to
%% handle the event.
%%
%% @spec state_name(Event, From, State) ->
%%                   {next_state, NextStateName, NextState} |
%%                   {next_state, NextStateName, NextState, Timeout} |
%%                   {reply, Reply, NextStateName, NextState} |
%%                   {reply, Reply, NextStateName, NextState, Timeout} |
%%                   {stop, Reason, NewState} |
%%                   {stop, Reason, Reply, NewState}
%% @end
%%--------------------------------------------------------------------
state_name(_Event, _From, State) ->
    Reply = ok,
    {reply, Reply, state_name, State}.

%%--------------------------------------------------------------------
%% @private
%% @doc
%% Whenever a gen_fsm receives an event sent using
%% gen_fsm:send_all_state_event/2, this function is called to handle
%% the event.
%%
%% @spec handle_event(Event, StateName, State) ->
%%                   {next_state, NextStateName, NextState} |
%%                   {next_state, NextStateName, NextState, Timeout} |
%%                   {stop, Reason, NewState}
%% @end
%%--------------------------------------------------------------------
handle_event(_Event, StateName, State) ->
    {next_state, StateName, State}.

%%--------------------------------------------------------------------
%% @private
%% @doc
%% Whenever a gen_fsm receives an event sent using
%% gen_fsm:sync_send_all_state_event/[2,3], this function is called
%% to handle the event.
%%
%% @spec handle_sync_event(Event, From, StateName, State) ->
%%                   {next_state, NextStateName, NextState} |
%%                   {next_state, NextStateName, NextState, Timeout} |
%%                   {reply, Reply, NextStateName, NextState} |
%%                   {reply, Reply, NextStateName, NextState, Timeout} |
%%                   {stop, Reason, NewState} |
%%                   {stop, Reason, Reply, NewState}
%% @end
%%--------------------------------------------------------------------
handle_sync_event(_Event, _From, StateName, State) ->
    Reply = ok,
    {reply, Reply, StateName, State}.

%%--------------------------------------------------------------------
%% @private
%% @doc
%% This function is called by a gen_fsm when it receives any
%% message other than a synchronous or asynchronous event
%% (or a system message).
%%
%% @spec handle_info(Info,StateName,State)->
%%                   {next_state, NextStateName, NextState} |
%%                   {next_state, NextStateName, NextState, Timeout} |
%%                   {stop, Reason, NewState}
%% @end
%%--------------------------------------------------------------------
handle_info(_Info, StateName, State) ->
    {next_state, StateName, State}.

%%--------------------------------------------------------------------
%% @private
%% @doc
%% This function is called by a gen_fsm when it is about to
%% terminate. It should be the opposite of Module:init/1 and do any
%% necessary cleaning up. When it returns, the gen_fsm terminates with
%% Reason. The return value is ignored.
%%
%% @spec terminate(Reason, StateName, State) -> void()
%% @end
%%--------------------------------------------------------------------
terminate(normal, _StateName, _State) ->
    ok;
terminate(Reason, StateName, State) ->
    store_terminate(Reason, StateName, State),
    ok.
%%--------------------------------------------------------------------
%% @private
%% @doc
%% Convert process state when code is changed
%%
%% @spec code_change(OldVsn, StateName, State, Extra) ->
%%                   {ok, StateName, NewState}
%% @end
%%--------------------------------------------------------------------
code_change(_OldVsn, StateName, State, _Extra) ->
    {ok, StateName, State}.

%%%===================================================================
%%% Internal functions
%%%===================================================================
-spec end_session(State :: #state{}, Error :: error_code()) ->
			 {stop, normal, State :: #state{}}.
end_session(#state{session_key = Key,
		   sniffer = Sniffer,
		   t_last_msg = Tl,
		   session = Session,
		   t_start = Ts,
		   latency = L,
		   end_cause = Cause,
		   retrans = SR,
		   transaction = Tr,
		   transactions = Trs,
		   pcap_records = Rs,
		   filters = Filters
		  } = State, Error) ->
    SU = #session_update{
	    session = Session,
	    t_start = Ts,
	    latency = L,
	    t_end = Tl, 
	    end_cause = Cause,
	    error_code = Error,
	    syn_retrans = SR,
	    transactions = merge_tr(Tr, Trs)},
    act(Session, Rs, match:match(SU, Filters)),
    admin:session_update(SU),
    sniffer:end_session(Sniffer,Key),
    {stop, normal, State}. 

-spec merge_tr(Tr :: #transaction{}, Trs :: [#transaction{}]) ->
		       NewTrs :: [#transaction{}].

merge_tr(Tr, Trs) ->
    [Tr | Trs].


act(_Session, _PcapRecords, none) ->
    ok;
act(Session, PcapRecords, Filter) ->
    action:act(Session, PcapRecords, Filter).

%% @doc
-spec latency(T1 :: time(), T2 :: time()) ->
			   T :: latency().
latency(#timeStamp{seconds = S1, micro = U1} = T1,
	 #timeStamp{seconds = S2, micro = U2}      = T2) when T1 < T2 ->
    (S2-S1)*1000000 + (U2-U1).

-spec update(NextState :: state(), Msg :: #msg{}, State :: #state{}) ->
		    {next_state, NextState :: state(), 
		     NewState :: #state{}, ?MSG_TIMEOUT}.
update(NextState, #msg{sender = Sniffer, session_key = Key, 
	      ts = T, pcap_record = R},
	 #state{sniffer = Sniffer, session_key = Key, 
		pcap_records = Rs,
	       states = States} = State) -> 
    #next_state{next_state = NextState,
		state = State#state{t_last_msg = T, pcap_records = [R|Rs],
				    states = [NextState | States]}}.
    
-spec rx_update(NextState :: state(), Msg :: #msg{}, State :: #state{}) ->
		    #next_state{}.
rx_update(NextState, #msg{len=L} = Msg,
	  #state{transaction = #transaction{rx_bytes = B, rx_frames = F} 
		 = Tr} = State) ->
    NewState = State#state{transaction = 
			       Tr#transaction{rx_bytes = B+L, 
					      rx_frames = F+1}},
    update(NextState, Msg, NewState).


-spec tx_update(NextState :: state(), Msg :: #msg{}, State :: #state{}) ->
		    #next_state{}.
tx_update(NextState, #msg{len=L} = Msg,
	  #state{transaction = Tr} = State) ->
    NewState = State#state{transaction = tx_stats(Tr,L)},
    update(NextState, Msg, NewState).

-spec tx_stats(Tr :: #transaction{}, L :: pos_integer()) ->
		      UpdatedTr :: #transaction{}.
tx_stats(#transaction{tx_bytes = B, tx_frames = F} 
	 = Tr, L) ->
    Tr#transaction{tx_bytes = B+L, 
		   tx_frames = F+1}.   

-spec unexpected(NextState :: state(), Msg :: #msg{}, State :: #state{}) ->
		    #next_state{}.

unexpected(NextState, 
	   Msg,
	   State) ->
    R = update(NextState, Msg, State),
    NewState = R#next_state.state,
%    ?dbg([?rec_info(msg,Msg),?rec_info(state,NewState)]),
    store_unexpected(Msg, NewState),
    R.


client_close(true) ->
    c_rst;
client_close(_R) ->
    c_fin.

server_close(true) ->
    s_rst;
server_close(_R) ->
    s_fin.

end_cause(#five_tuple{sip = SIP, dip = DIP, dp = DP},
	  #session{client = SIP, 
		   server = DIP, 
		   port = DP
		  },
	  R) ->
    client_close(R);
end_cause(_FT, _Session, R) ->
    server_close(R).

-spec timeout( State :: #state{} , Error :: error_code()) ->
	 {stop, normal, NewState :: #state{}}. 
timeout(State, Error) ->
    end_session(State#state{
			   end_cause = timeout}, Error).
	

end_session(R, #msg{five_tuple = FT} = Msg,
	     #state{session = Session} = State, Error) -> 
    #next_state{state = NewState} = update(idle, Msg, State),
    end_session(NewState#state{end_cause = end_cause(FT,Session,R)}, Error).


-spec store_terminate(Reason::any(), StateName :: state(), 
		      State :: #state{}) ->
			     ok.
store_terminate(Reason, StateName, State) ->
   Descriptor = io_lib:format(
		  "session:~p with State=~n~n~p~n~nReason=~n~n~p ", 
			       [StateName, State, Reason]),
    store(terminate, State, Descriptor).


-spec store(Type :: debug_session(), 
	    State :: #state{}, Descriptor :: iodata()) -> ok.

-spec store_unexpected(Msg :: #msg{}, State :: #state{}) -> ok.
store_unexpected(Msg, State) ->
    Descriptor = io_lib:format(
"unexpected msg ~n~n~w~n~n received by session with State =~n~n~w~n~n", 
		   [?rec_info(msg, Msg#msg{pcap_record = <<>>}),
		    ?rec_info(state, State#state{pcap_records = []})]),
    store(unexpected, State, Descriptor).

store(Type, State, Descriptor) ->
    Matched = ets:update_counter(debug_session, 
				 Type, 1),
    store(Type, State, Descriptor, Matched).

-spec store(Type :: debug_session(), 
	    State :: #state{}, Descriptor :: iodata(),
	   Matched :: pos_integer()) -> ok.
store(_Type, _State, _Descriptor, Matched) when Matched > 128 -> ok;
store(Type, #state{pcap_records = Rs}, Descriptor, Matched) ->
    Name = lists:flatten(io_lib:format("debug/session/~w/~w",
				       [Type, Matched])),
    PcapFile = [?PCAP_FILE_HDR, lists:reverse(Rs)],
    action:store(Name, PcapFile, Descriptor).
